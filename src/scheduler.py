#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π Gold Price Predictor
–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
"""

import os
import time
import logging
import json
import traceback
import argparse
from datetime import datetime, timedelta
import schedule
import threading

from predict import GoldPredictor
from prediction_tracker import PredictionTracker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'logs'))
os.makedirs(log_dir, exist_ok=True)
log_file_path = os.path.join(log_dir, 'scheduler.log')

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file_path),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class GoldPredictorScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π Gold Price Predictor."""
    
    def __init__(self, config_path="../config/predictor_config.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
        
        Args:
            config_path (str): –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        self.config_path = config_path
        self.config = self._load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
        self.predictor = GoldPredictor(config_path=config_path)
        
        # –¢—Ä–µ–∫–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        self.tracker = PredictionTracker()
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler = schedule
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã
        self.running = False
        self.thread = None
    
    def _load_config(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞.
        
        Returns:
            dict: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        if os.path.exists(self.config_path):
            try:
                with open(self.config_path, 'r') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return {}
        else:
            logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}")
            return {}
    
    def update_config(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
        self.config = self._load_config()
        
        # –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.scheduler.clear()
        self._schedule_tasks()
    
    def _schedule_tasks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á."""
        # –í—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        prediction_time = self.config.get("prediction_time", "10:00")
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ {prediction_time} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
        self.scheduler.every().day.at(prediction_time).do(self.generate_prediction)
        
        # –í—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        verification_time = self.config.get("verification_time", "10:00")
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ {verification_time} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
        self.scheduler.every().day.at(verification_time).do(self.verify_prediction)
    
    def generate_prediction(self):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram.
        
        Returns:
            bool: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Bybit...")
            from data_updater import update_gold_history_from_bybit
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            import os
            from config_loader import load_environment_variables
            load_environment_variables()
            
            api_key = os.getenv('BYBIT_API_KEY', '')
            api_secret = os.getenv('BYBIT_API_SECRET', '')
            
            if not api_key or not api_secret:
                logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ Bybit, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
                return False
            
            update_result = update_gold_history_from_bybit(
                os.path.join(self.predictor.data_dir, 'GC_F_latest.csv'),
                api_key,  # Bybit API KEY –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
                api_secret  # Bybit API SECRET –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            )
            if update_result:
                logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ!")

            logger.info("üîÆ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
            class Args:
                def __init__(self):
                    self.model = 'ensemble'
                    self.target_type = 'binary'
                    self.horizon = 1
                    self.print_proba = False
                    self.send_telegram = False  # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–µ, –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∞–º–∏
                    self.config = '../config/predictor_config.json'
            
            self.predictor.args = Args()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            result = self.predictor.predict()
            
            if result:
                logger.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ {result.get('date', result.get('prediction_date', ''))}")
                logger.info(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {result.get('direction')} —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {result.get('confidence'):.2f}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                try:
                    self.predictor._send_prediction_to_telegram(result)
                    logger.info(f"‚úâÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
                    
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            logger.error(traceback.format_exc())
            return False
    
    def verify_prediction(self):
        """
        –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
        
        Returns:
            bool: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
            yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
            logger.info(f"üß™ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –¥–∞—Ç—ã {yesterday}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = self.predictor.prepare_latest_data()
            if data is None:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö
            last_close = data['last_close']
            prev_close = data.get('prev_close', None)
            
            if prev_close is None:
                logger.error("‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ü–µ–Ω–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            actual_direction = "UP" if last_close > prev_close else "DOWN"
            logger.info(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {actual_direction} (last: {last_close}, prev: {prev_close})")
            
            # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Ç—Ä–µ–∫–µ—Ä–µ
            verified = self.tracker.verify_prediction(yesterday, actual_direction)
            
            if verified:
                logger.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {yesterday} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ/–Ω–µ—É—Å–ø–µ—à–Ω—ã–µ —Å–µ—Ä–∏–∏
                stats = self.tracker.get_statistics()
                if stats.get("recent_streak", 0) >= 3:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Å–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                    streak_message = f"*üî• –°–µ—Ä–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {stats['recent_streak']}*\n\n"
                    streak_message += f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–æ—Å—Ç–∏–≥–ª–∞ {stats['recent_streak']} –ø–æ–¥—Ä—è–¥!\n"
                    streak_message += f"–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {stats['accuracy'] * 100:.1f}%"
                    
                    self.predictor.send_telegram_message(streak_message)
                
                # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º
                if datetime.now().weekday() == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    weekly_report = self.tracker.generate_weekly_report()
                    self.predictor.send_telegram_message(weekly_report)
                
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {yesterday}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            logger.error(traceback.format_exc())
            return False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        self._schedule_tasks()
        
        self.running = True
        self.thread = threading.Thread(target=self._run_scheduler)
        self.thread.daemon = True
        self.thread.start()
        
        logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Gold Price Predictor –∑–∞–ø—É—â–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∫–æ–≥–¥–∞ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è
        next_runs = []
        for job in self.scheduler.get_jobs():
            next_run = job.next_run
            next_runs.append((job.job_func.__name__, next_run))
            logger.info(f"üìÖ –ó–∞–¥–∞—á–∞ {job.job_func.__name__} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {next_run}")
        
        return True
    
    def _run_scheduler(self):
        """–§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        while self.running:
            self.scheduler.run_pending()
            time.sleep(1)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        self.running = False
        if self.thread:
            self.thread.join(timeout=1)
        self.scheduler.clear()
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Gold Price Predictor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True


def run_as_service():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–∫ —Å–µ—Ä–≤–∏—Å–∞."""
    scheduler = GoldPredictorScheduler()
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    scheduler.generate_prediction()
    
    try:
        while True:
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        scheduler.stop()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Gold Price Predictor Scheduler")
    parser.add_argument("--run_now", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å")
    parser.add_argument("--verify_now", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å")
    parser.add_argument("--service", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–∫ —Å–µ—Ä–≤–∏—Å")
    parser.add_argument("--config", type=str, default="../config/predictor_config.json", help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É")
    
    args = parser.parse_args()
    
    scheduler = GoldPredictorScheduler(config_path=args.config)
    
    if args.run_now:
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—Ä—É—á–Ω—É—é...")
        scheduler.generate_prediction()
    elif args.verify_now:
        logger.info("–ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é...")
        scheduler.verify_prediction()
    elif args.service:
        logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–∫ —Å–µ—Ä–≤–∏—Å–∞...")
        run_as_service()
    else:
        scheduler.start()
        print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            scheduler.stop()
