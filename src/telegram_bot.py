#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram-–±–æ—Ç–æ–º Gold Price Predictor.
–†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã.
"""

import os
import logging
import json
from datetime import datetime, timedelta
import asyncio
import asyncio
import schedule
import time
import threading
from datetime import datetime, timedelta

from data_updater import update_gold_history_from_bybit

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

from predict import GoldPredictor
from prediction_tracker import PredictionTracker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class GoldPredictorBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram-–±–æ—Ç–æ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞."""
    
    def __init__(self, config_path="config/predictor_config.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
        
        Args:
            config_path (str): –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        self.config_path = config_path
        self.config = self._load_config()
        
        if not self.config.get("telegram_token"):
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.predictor = GoldPredictor(config_path=config_path)
        self.tracker = PredictionTracker()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.application = Application.builder().token(self.config["telegram_token"]).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        self.scheduler = schedule
        self.scheduler_thread = None
        self.running = False
    
    def _load_config(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞.
        
        Returns:
            dict: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        if os.path.exists(self.config_path):
            try:
                with open(self.config_path, 'r') as f:
                    return json.load(f)
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return {}
        else:
            logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}")
            return {}
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.cmd_start))
        self.application.add_handler(CommandHandler("help", self.cmd_help))
        self.application.add_handler(CommandHandler("predict", self.cmd_predict))
        self.application.add_handler(CommandHandler("stats", self.cmd_stats))
        self.application.add_handler(CommandHandler("settings", self.cmd_settings))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.cb_predict, pattern="^predict"))
        self.application.add_handler(CallbackQueryHandler(self.cb_stats, pattern="^stats$"))
        self.application.add_handler(CallbackQueryHandler(self.cb_settings, pattern="^settings"))
        self.application.add_handler(CallbackQueryHandler(self.cb_model, pattern="^model"))
        self.application.add_handler(CallbackQueryHandler(self.cb_horizon, pattern="^horizon"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.cb_start, pattern="^start"))
        self.application.add_handler(CallbackQueryHandler(self.cb_help, pattern="^help"))
        self.application.add_handler(CallbackQueryHandler(self.cb_stats_weekly, pattern="^stats_weekly"))
        self.application.add_handler(CallbackQueryHandler(self.cb_stats_monthly, pattern="^stats_monthly"))
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        keyboard = [
            [
                InlineKeyboardButton("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="predict"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            "*üåü Gold Price Predictor Bot*\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º "
            "–º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="Markdown")
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        message = (
            "*üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ Gold Price Predictor Bot*\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /predict - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞\n"
            "‚Ä¢ /stats - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤\n"
            "‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "*–û –±–æ—Ç–µ:*\n"
            "–ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –∑–æ–ª–æ—Ç–∞ –∏ "
            "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è "
            "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã (–≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑).\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:*\n"
            "‚Ä¢ üå≤ XGBoost - –ú–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π\n"
            "‚Ä¢ üß† LSTM - –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å —Å –¥–ª–∏–Ω–Ω–æ–π –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é\n"
            "‚Ä¢ ‚öñÔ∏è Ensemble - –ê–Ω—Å–∞–º–±–ª—å –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π\n\n"
            "*–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞."
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="predict")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="Markdown")
    
    async def cmd_predict(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /predict."""
        await self._generate_prediction(update, context)
    
    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats."""
        await self._show_statistics(update, context)
    
    async def cmd_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings."""
        await self._show_settings(update, context)
    
    async def cb_predict(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞."""
        query = update.callback_query
        await query.answer()
        
        if query.data == "predict":
            await self._generate_prediction(update, context, is_callback=True)
        
    async def cb_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        query = update.callback_query
        await query.answer()
        
        if query.data == "stats":
            await self._show_statistics(update, context, is_callback=True)
        elif query.data == "stats_weekly":
            await self._show_weekly_statistics(update, context, is_callback=True)
        elif query.data == "stats_monthly":
            await self._show_monthly_statistics(update, context, is_callback=True)
    
    async def cb_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        query = update.callback_query
        await query.answer()
        
        if query.data == "settings":
            await self._show_settings(update, context, is_callback=True)
    
    async def cb_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
        query = update.callback_query
        await query.answer()
        
        model = query.data.split("_")[1]
        self.predictor.update_config(model_type=model)
        
        message = f"*‚öôÔ∏è –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:* {model.upper()}"
        
        keyboard = [
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown")
    
    async def cb_horizon(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è."""
        query = update.callback_query
        await query.answer()
        
        horizon = int(query.data.split("_")[1])
        self.predictor.update_config(horizon=horizon)
        
        message = f"*‚öôÔ∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:* {horizon} {'–¥–µ–Ω—å' if horizon == 1 else '–¥–Ω—è' if 1 < horizon < 5 else '–¥–Ω–µ–π'}"
        
        keyboard = [
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown")
    
    async def cb_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        query = update.callback_query
        await query.answer()
        
        # –î—É–±–ª–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑ cmd_start, –Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º edit_message_text
        keyboard = [
            [
                InlineKeyboardButton("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="predict"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"*üîÆ Gold Price Predictor ‚Ä¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        message += f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gold Price Predictor!\n\n"
        message += f"–Ø –ø–æ–º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.\n\n"
        message += f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown")
        
    async def cb_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏."""
        query = update.callback_query
        await query.answer()
        
        # –î—É–±–ª–∏—Ä—É–µ–º –∫–æ–¥ –∏–∑ cmd_help, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text
        help_text = """*‚ùì –ü–æ–º–æ—â—å –ø–æ Gold Price Predictor*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/predict - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞
/stats - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–û –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö:

‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º."""
        
        keyboard = [
            [InlineKeyboardButton("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="predict")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode="Markdown")
        
    async def cb_stats_weekly(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ _show_weekly_statistics
        await self._show_weekly_statistics(update, context, is_callback=True)
        
    async def cb_stats_monthly(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ _show_monthly_statistics
        await self._show_monthly_statistics(update, context, is_callback=True)
    
    async def _generate_prediction(self, update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback=False):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞.
        
        Args:
            update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
            is_callback (bool): True, –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
        """
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        message = "*üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.*"
        
        if is_callback:
            await update.callback_query.edit_message_text(message, parse_mode="Markdown")
            chat_id = update.callback_query.message.chat_id
            message_id = update.callback_query.message.message_id
        else:
            sent_message = await update.message.reply_text(message, parse_mode="Markdown")
            chat_id = update.message.chat_id
            message_id = sent_message.message_id
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.create_task(self._async_generate_prediction(chat_id, message_id))
    
    async def _async_generate_prediction(self, chat_id, message_id):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞.
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞
            message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            # 1. –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–æ–ª–æ—Ç–∞ —á–µ—Ä–µ–∑ Bybit
            try:
                from data_updater import update_gold_history_from_bybit
                from config_loader import load_environment_variables
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                load_environment_variables()
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                import os
                api_key = os.getenv('BYBIT_API_KEY')
                api_secret = os.getenv('BYBIT_API_SECRET')
                
                # –ï—Å–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                if not api_key or not api_secret:
                    api_key = self.config.get('bybit_api_key', '')
                    api_secret = self.config.get('bybit_api_secret', '')
                    
                if not api_key or not api_secret:
                    logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ Bybit –≤ .env –∏ –∫–æ–Ω—Ñ–∏–≥–µ')
                    await self.application.bot.send_message(
                        chat_id=chat_id,
                        text="‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ Bybit"
                    )
                else:
                    csv_path = os.path.join(self.predictor.data_dir, 'GC_F_latest.csv')
                    update_gold_history_from_bybit(csv_path, api_key, api_secret)
                    logger.info('–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–æ–ª–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ Bybit')
            except Exception as update_exc:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ Bybit: {update_exc}')
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —Ç.–∫. –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
            await asyncio.sleep(1)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            self.predictor.args = type('Args', (), {
                'model': 'ensemble',
                'target_type': 'binary',
                'horizon': 1,
                'print_proba': False,
                'send_telegram': False
            })
            
            prediction = self.predictor.predict()
            
            if prediction:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                self.tracker.save_prediction(prediction)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
                emoji_direction = "üîº" if prediction["direction"] == "UP" else "üîΩ"
                emoji_confidence = "üéØ" if prediction["confidence"] > 0.7 else "üîç"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å —Å —ç–º–æ–¥–∑–∏
                model_type = prediction.get("model", "ensemble")
                model_emoji = {
                    "xgboost": "üå≤",  # –î–µ—Ä–µ–≤–æ
                    "lstm": "üß†",     # –ù–µ–π—Ä–æ—Å–µ—Ç—å
                    "ensemble": "‚öñÔ∏è"  # –í–µ—Å—ã/–∞–Ω—Å–∞–º–±–ª—å
                }.get(model_type.lower(), "üîÆ")
                
                # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Markdown
                message = f"*üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞*\n\n"
                message += f"üìÖ *–î–∞—Ç–∞:* {prediction['prediction_date']}\n\n"
                message += f"{emoji_direction} *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {prediction['direction']}\n"
                message += f"üí∞ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* ${prediction['current_price']:.2f}\n"
                message += f"{emoji_confidence} *–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:* {prediction['confidence']:.2f}\n\n"
                message += f"{model_emoji} *–ú–æ–¥–µ–ª—å:* {model_type.upper()}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
                message += "*–ü—Ä–æ–≥–Ω–æ–∑—ã –º–æ–¥–µ–ª–µ–π:*\n"
                for model_name, pred in prediction.get("all_predictions", {}).items():
                    model_icon = {
                        "xgboost": "üå≤",
                        "lstm": "üß†",
                        "ensemble": "‚öñÔ∏è"
                    }.get(model_name.lower(), "üîÆ")
                    direction_icon = "üîº" if pred['direction'] == "UP" else "üîΩ"
                    confidence_value = pred['confidence']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –≤–∏–¥–µ –±–∞—Ä–∞
                    confidence_bar = ""
                    bar_length = int(confidence_value * 10)
                    if pred['direction'] == "UP":
                        confidence_bar = "üü©" * bar_length + "‚¨úÔ∏è" * (10 - bar_length)
                    else:  # DOWN
                        confidence_bar = "üü•" * bar_length + "‚¨úÔ∏è" * (10 - bar_length)
                        
                    message += f"{model_icon} *{model_name.capitalize()}:* {direction_icon} {pred['direction']} ({confidence_value:.2f})\n"
                    message += f"{confidence_bar}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                message += f"\nüïí *–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞:* {datetime.now().strftime('%Y-%m-%d %H:%M')}"
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                keyboard = [
                    [
                        InlineKeyboardButton("üîÆ –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data="predict"),
                        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
                    ],
                    [InlineKeyboardButton("¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            else:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
                message = (
                    "*‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑*\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
                )
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="predict")],
                    [InlineKeyboardButton("¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            
            message = (
                "*‚ùå –û—à–∏–±–∫–∞*\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="predict")],
                [InlineKeyboardButton("¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            except Exception as e2:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
    
    async def _show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback=False):
        """
        –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
        
        Args:
            update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
            is_callback (bool): True, –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
        """
        stats = self.tracker.get_statistics()
        
        if stats["total"] > 0:
            message = (
                "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤*\n\n"
                f"–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {stats['total']}\n"
                f"–í–µ—Ä–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {stats['correct']} ({stats['accuracy'] * 100:.1f}%)\n\n"
                f"üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {stats['recent_streak']} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤\n"
                f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {stats['best_streak']} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤\n\n"
                "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º:*\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º
            for model, model_stats in stats.get("by_model", {}).items():
                if model_stats["total"] > 0:
                    model_icon = {
                        "xgboost": "üå≤",
                        "lstm": "üß†",
                        "ensemble": "‚öñÔ∏è"
                    }.get(model.lower(), "üîÆ")
                    message += f"{model_icon} *{model.capitalize()}*: {model_stats['correct']}/{model_stats['total']} ({model_stats['accuracy'] * 100:.1f}%)\n"
        else:
            message = (
                "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤*\n\n"
                "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ "
                "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã."
            )
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—å–Ω–∞—è", callback_data="stats_weekly"),
                InlineKeyboardButton("üìä –ú–µ—Å—è—á–Ω–∞—è", callback_data="stats_monthly")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if is_callback:
            await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="Markdown")
    
    async def _show_weekly_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback=False):
        """
        –ü–æ–∫–∞–∑ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
        
        Args:
            update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
            is_callback (bool): True, –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
        """
        report = self.tracker.generate_weekly_report()
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –û–±—â–∞—è", callback_data="stats"),
                InlineKeyboardButton("üìä –ú–µ—Å—è—á–Ω–∞—è", callback_data="stats_monthly")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if is_callback:
            await update.callback_query.edit_message_text(report, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await update.message.reply_text(report, reply_markup=reply_markup, parse_mode="Markdown")
    
    async def _show_monthly_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback=False):
        """
        –ü–æ–∫–∞–∑ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
        
        Args:
            update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
            is_callback (bool): True, –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
        """
        monthly_stats = self.tracker.get_monthly_statistics()
        stats = monthly_stats["statistics"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {monthly_stats['current_month']}*\n\n"
        
        if stats["total"] > 0:
            message += f"–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {stats['total']}\n"
            message += f"–í–µ—Ä–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {stats['correct']} ({stats['accuracy'] * 100:.1f}%)\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º
            general_stats = self.tracker.get_statistics()
            message += "*–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:*\n"
            message += f"–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {general_stats['accuracy'] * 100:.1f}%\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            recent_preds = monthly_stats["recent_predictions"]
            if recent_preds:
                message += "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã:*\n"
                for pred in recent_preds[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                    date = pred.get("prediction_date", "")
                    is_correct = pred.get("is_correct", False)
                    direction = pred.get("direction", "")
                    
                    icon = "‚úÖ" if is_correct else "‚ùå"
                    direction_icon = "üîº" if direction == "UP" else "üîΩ"
                    
                    message += f"{icon} {date}: {direction_icon} {direction}\n"
        else:
            message += "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –µ—â–µ –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –û–±—â–∞—è", callback_data="stats"),
                InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—å–Ω–∞—è", callback_data="stats_weekly")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if is_callback:
            await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="Markdown")
    
    async def _show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback=False):
        """
        –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
            is_callback (bool): True, –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
        """
        # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config = self.predictor.config
        model_type = config.get("model_type", "ensemble")
        horizon = config.get("horizon", 1)
        target_type = config.get("target_type", "binary")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            "*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
            "*–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: {model_type.upper()}\n"
            f"‚Ä¢ –ì–æ—Ä–∏–∑–æ–Ω—Ç: {horizon} {'–¥–µ–Ω—å' if horizon == 1 else '–¥–Ω—è' if 1 < horizon < 5 else '–¥–Ω–µ–π'}\n"
            f"‚Ä¢ –¢–∏–ø —Ü–µ–ª–∏: {target_type.upper()}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = [
            [
                InlineKeyboardButton("üå≤ XGBoost", callback_data="model_xgboost"),
                InlineKeyboardButton("üß† LSTM", callback_data="model_lstm"),
                InlineKeyboardButton("‚öñÔ∏è Ensemble", callback_data="model_ensemble")
            ],
            [
                InlineKeyboardButton("üïí 1 –¥–µ–Ω—å", callback_data="horizon_1"),
                InlineKeyboardButton("üïí 3 –¥–Ω—è", callback_data="horizon_3"),
                InlineKeyboardButton("üïí 7 –¥–Ω–µ–π", callback_data="horizon_7")
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if is_callback:
            await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="Markdown")
    
    def _schedule_tasks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á."""
        # –í—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        prediction_time = self.config.get("prediction_time", "10:00")
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ {prediction_time} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
        self.scheduler.every().day.at(prediction_time).do(self.scheduled_prediction)
        
        # –í—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        verification_time = self.config.get("verification_time", "10:00")
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ {verification_time} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
        self.scheduler.every().day.at(verification_time).do(self.scheduled_verification)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id
        chat_id = self.config.get("telegram_chat_id")
        if chat_id:
            msg = f"*‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Gold Predictor –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n"
            msg += f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ: {prediction_time}\n"
            msg += f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {verification_time}\n\n"
            msg += f"–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —ç—Ç–æ –≤—Ä–µ–º—è."
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π Telegram API –±–µ–∑ asyncio
                import requests
                # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram API
                url = f"https://api.telegram.org/bot{self.config['telegram_token']}/sendMessage"
                payload = {
                    'chat_id': chat_id,
                    'text': msg,
                    'parse_mode': 'Markdown'
                }
                response = requests.post(url, json=payload)
                if not response.ok:
                    logger.warning(f"–ù–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Telegram API: {response.status_code} - {response.text}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {e}")
    
    def _run_scheduler(self):
        """–§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        while self.running:
            self.scheduler.run_pending()
            time.sleep(1)
    
    def scheduled_prediction(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞."""
        try:
            logger.info("üîÆ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
            class Args:
                def __init__(self):
                    self.model = 'ensemble'
                    self.target_type = 'binary'
                    self.horizon = 1
                    self.print_proba = False
                    self.send_telegram = False
                    self.config = '../config/predictor_config.json'
            
            self.predictor.args = Args()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            result = self.predictor.predict()
            
            if result:
                logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ {result.get('prediction_date')}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                chat_id = self.config.get("telegram_chat_id")
                if chat_id:
                    prediction_message = self._format_prediction_message(result)
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram API
                        import requests
                        url = f"https://api.telegram.org/bot{self.config['telegram_token']}/sendMessage"
                        payload = {
                            'chat_id': chat_id,
                            'text': prediction_message,
                            'parse_mode': 'Markdown'
                        }
                        response = requests.post(url, json=payload)
                        if response.ok:
                            logger.info(f"‚úâÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                        else:
                            logger.warning(f"–ù–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Telegram API: {response.status_code} - {response.text}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
                
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False
    
    def scheduled_verification(self):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
            yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
            logger.info(f"üß™ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –¥–∞—Ç—ã {yesterday}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = self.predictor.prepare_latest_data()
            if data is None:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö
            last_close = data['last_close']
            prev_close = data.get('prev_close', None)
            
            if prev_close is None:
                logger.error("‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ü–µ–Ω–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            actual_direction = "UP" if last_close > prev_close else "DOWN"
            logger.info(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {actual_direction} (last: {last_close}, prev: {prev_close})")
            
            # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Ç—Ä–µ–∫–µ—Ä–µ
            verified = self.tracker.verify_prediction(yesterday, actual_direction)
            
            if verified:
                logger.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {yesterday} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ/–Ω–µ—É—Å–ø–µ—à–Ω—ã–µ —Å–µ—Ä–∏–∏
                stats = self.tracker.get_statistics()
                chat_id = self.config.get("telegram_chat_id")
                
                if chat_id:
                    if stats.get("recent_streak", 0) >= 3:
                        try:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Å–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                            streak_message = f"*üî• –°–µ—Ä–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {stats['recent_streak']}*\n\n"
                            streak_message += f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–æ—Å—Ç–∏–≥–ª–∞ {stats['recent_streak']} –ø–æ–¥—Ä—è–¥!\n"
                            streak_message += f"–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {stats['accuracy'] * 100:.1f}%"
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram API
                            import requests
                            url = f"https://api.telegram.org/bot{self.config['telegram_token']}/sendMessage"
                            payload = {
                                'chat_id': chat_id,
                                'text': streak_message,
                                'parse_mode': 'Markdown'
                            }
                            response = requests.post(url, json=payload)
                            if not response.ok:
                                logger.warning(f"–ù–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Telegram API: {response.status_code} - {response.text}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–µ—Ä–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")
                    
                    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º
                    if datetime.now().weekday() == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                        try:
                            weekly_report = self.tracker.generate_weekly_report()
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram API
                            import requests
                            url = f"https://api.telegram.org/bot{self.config['telegram_token']}/sendMessage"
                            payload = {
                                'chat_id': chat_id,
                                'text': weekly_report,
                                'parse_mode': 'Markdown'
                            }
                            response = requests.post(url, json=payload)
                            if not response.ok:
                                logger.warning(f"–ù–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Telegram API: {response.status_code} - {response.text}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
                
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {yesterday}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False
    
    def _format_prediction_message(self, prediction):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –¥–ª—è Telegram."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        direction = prediction.get('direction', 'UNKNOWN')
        confidence = prediction.get('confidence', 0.0)
        price = prediction.get('current_price', 0.0)
        prediction_date = prediction.get('prediction_date', '')
        model_type = prediction.get('model', 'ensemble')
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
        direction_emoji = "üîº" if direction == "UP" else "üîΩ" if direction == "DOWN" else "‚èπÔ∏è"
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
        confidence_emoji = "üéØ" if confidence > 0.8 else "üîç" if confidence > 0.6 else "‚ùì"
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
        model_emoji = {
            "xgboost": "üå≤",  # –î–µ—Ä–µ–≤–æ –¥–ª—è XGBoost
            "lstm": "üß†",     # –ú–æ–∑–≥ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            "ensemble": "‚öñÔ∏è"  # –í–µ—Å—ã –¥–ª—è –∞–Ω—Å–∞–º–±–ª—è
        }.get(model_type.lower(), "üîÆ")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        message = f"*üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞*\n\n"
        message += f"üìÖ *–î–∞—Ç–∞:* {prediction_date}\n"
        message += f"üí∞ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* ${price:.2f}\n\n"
        message += f"{direction_emoji} *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {direction}\n"
        message += f"{confidence_emoji} *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {confidence:.2f}\n\n"
        message += f"{model_emoji} *–ú–æ–¥–µ–ª—å:* {model_type.upper()}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        all_predictions = prediction.get('all_predictions', {})
        if all_predictions:
            message += "*–ü—Ä–æ–≥–Ω–æ–∑—ã –º–æ–¥–µ–ª–µ–π:*\n"
            for model_name, pred in all_predictions.items():
                model_icon = {
                    "xgboost": "üå≤",
                    "lstm": "üß†",
                    "ensemble": "‚öñÔ∏è"
                }.get(model_name.lower(), "üîÆ")
                pred_direction = pred.get('direction', 'UNKNOWN')
                pred_emoji = "üîº" if pred_direction == "UP" else "üîΩ" if pred_direction == "DOWN" else "‚èπÔ∏è"
                pred_confidence = pred.get('confidence', 0.0)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                bar_length = int(pred_confidence * 10)
                confidence_bar = ""
                if pred_direction == "UP":
                    confidence_bar = "üü©" * bar_length + "‚¨úÔ∏è" * (10 - bar_length)
                else:  # DOWN
                    confidence_bar = "üü•" * bar_length + "‚¨úÔ∏è" * (10 - bar_length)
                
                message += f"{model_icon} *{model_name.capitalize()}:* {pred_emoji} {pred_direction} ({pred_confidence:.2f})\n"
                message += f"{confidence_bar}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        message += f"\nüïí *–ü—Ä–æ–≥–Ω–æ–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:* {datetime.now().strftime('%Y-%m-%d %H:%M')}\n"
        message += f"\n_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /predict –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞_"
        
        return message
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
        self._schedule_tasks()
        
        self.running = True
        self.scheduler_thread = threading.Thread(target=self._run_scheduler)
        self.scheduler_thread.daemon = True
        self.scheduler_thread.start()
        
        logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Gold Price Predictor –∑–∞–ø—É—â–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∫–æ–≥–¥–∞ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è
        next_runs = []
        for job in self.scheduler.get_jobs():
            next_run = job.next_run
            next_runs.append((job.job_func.__name__, next_run))
            logger.info(f"üìÖ –ó–∞–¥–∞—á–∞ {job.job_func.__name__} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {next_run}")
        
        return True
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        self.running = False
        if self.scheduler_thread:
            self.scheduler_thread.join(timeout=1)
        self.scheduler.clear()
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Gold Price Predictor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
        
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ Gold Predictor...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.start_scheduler()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        try:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            # –ü—Ä–æ—Å—Ç–æ –∂–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            await asyncio.Event().wait()
        except (KeyboardInterrupt, SystemExit):
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –±–æ—Ç–∞
            self.stop_scheduler()
            await self.application.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram-–±–æ—Ç–∞ Gold Predictor...")
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.stop_scheduler()
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        self.application.stop()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        bot = GoldPredictorBot()
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
